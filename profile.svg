<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg -- python v4d.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="1752"><g><title>generate_random_frames (v4d.py:77) (4 samples, 0.23%)</title><rect x="0.1142%" y="84" width="0.2283%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="4"/><text x="0.3642%" y="94.50"></text></g><g><title>__exit__ (concurrent/futures/_base.py:647) (4 samples, 0.23%)</title><rect x="0.1142%" y="100" width="0.2283%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="4"/><text x="0.3642%" y="110.50"></text></g><g><title>shutdown (concurrent/futures/process.py:834) (4 samples, 0.23%)</title><rect x="0.1142%" y="116" width="0.2283%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="4"/><text x="0.3642%" y="126.50"></text></g><g><title>join (threading.py:1112) (4 samples, 0.23%)</title><rect x="0.1142%" y="132" width="0.2283%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="4"/><text x="0.3642%" y="142.50"></text></g><g><title>_wait_for_tstate_lock (threading.py:1132) (4 samples, 0.23%)</title><rect x="0.1142%" y="148" width="0.2283%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="4"/><text x="0.3642%" y="158.50"></text></g><g><title>get_preparation_data (multiprocessing/spawn.py:186) (4 samples, 0.23%)</title><rect x="0.3425%" y="244" width="0.2283%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="4"/><text x="0.5925%" y="254.50"></text></g><g><title>_launch (multiprocessing/popen_spawn_posix.py:42) (5 samples, 0.29%)</title><rect x="0.3425%" y="228" width="0.2854%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="5"/><text x="0.5925%" y="238.50"></text></g><g><title>_launch (multiprocessing/popen_spawn_posix.py:54) (21 samples, 1.20%)</title><rect x="0.6279%" y="228" width="1.1986%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="21"/><text x="0.8779%" y="238.50"></text></g><g><title>generate_random_frames (v4d.py:78) (36 samples, 2.05%)</title><rect x="0.3425%" y="84" width="2.0548%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="36"/><text x="0.5925%" y="94.50">g..</text></g><g><title>&lt;listcomp&gt; (v4d.py:78) (36 samples, 2.05%)</title><rect x="0.3425%" y="100" width="2.0548%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="36"/><text x="0.5925%" y="110.50">&lt;..</text></g><g><title>submit (concurrent/futures/process.py:791) (36 samples, 2.05%)</title><rect x="0.3425%" y="116" width="2.0548%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="36"/><text x="0.5925%" y="126.50">s..</text></g><g><title>_adjust_process_count (concurrent/futures/process.py:750) (36 samples, 2.05%)</title><rect x="0.3425%" y="132" width="2.0548%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="36"/><text x="0.5925%" y="142.50">_..</text></g><g><title>_spawn_process (concurrent/futures/process.py:768) (36 samples, 2.05%)</title><rect x="0.3425%" y="148" width="2.0548%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="36"/><text x="0.5925%" y="158.50">_..</text></g><g><title>start (multiprocessing/process.py:121) (36 samples, 2.05%)</title><rect x="0.3425%" y="164" width="2.0548%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="36"/><text x="0.5925%" y="174.50">s..</text></g><g><title>_Popen (multiprocessing/context.py:288) (36 samples, 2.05%)</title><rect x="0.3425%" y="180" width="2.0548%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="36"/><text x="0.5925%" y="190.50">_..</text></g><g><title>__init__ (multiprocessing/popen_spawn_posix.py:32) (36 samples, 2.05%)</title><rect x="0.3425%" y="196" width="2.0548%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="36"/><text x="0.5925%" y="206.50">_..</text></g><g><title>__init__ (multiprocessing/popen_fork.py:19) (36 samples, 2.05%)</title><rect x="0.3425%" y="212" width="2.0548%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="36"/><text x="0.5925%" y="222.50">_..</text></g><g><title>_launch (multiprocessing/popen_spawn_posix.py:58) (10 samples, 0.57%)</title><rect x="1.8265%" y="228" width="0.5708%" height="15" fill="rgb(210,31,41)" fg:x="32" fg:w="10"/><text x="2.0765%" y="238.50"></text></g><g><title>spawnv_passfds (multiprocessing/util.py:453) (10 samples, 0.57%)</title><rect x="1.8265%" y="244" width="0.5708%" height="15" fill="rgb(221,200,47)" fg:x="32" fg:w="10"/><text x="2.0765%" y="254.50"></text></g><g><title>generate_random_frames (v4d.py:80) (13 samples, 0.74%)</title><rect x="2.3973%" y="84" width="0.7420%" height="15" fill="rgb(226,26,5)" fg:x="42" fg:w="13"/><text x="2.6473%" y="94.50"></text></g><g><title>__new__ (tqdm/std.py:674) (13 samples, 0.74%)</title><rect x="2.3973%" y="100" width="0.7420%" height="15" fill="rgb(249,33,26)" fg:x="42" fg:w="13"/><text x="2.6473%" y="110.50"></text></g><g><title>__init__ (tqdm/_monitor.py:39) (13 samples, 0.74%)</title><rect x="2.3973%" y="116" width="0.7420%" height="15" fill="rgb(235,183,28)" fg:x="42" fg:w="13"/><text x="2.6473%" y="126.50"></text></g><g><title>start (threading.py:957) (13 samples, 0.74%)</title><rect x="2.3973%" y="132" width="0.7420%" height="15" fill="rgb(221,5,38)" fg:x="42" fg:w="13"/><text x="2.6473%" y="142.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:328) (18 samples, 1.03%)</title><rect x="3.3676%" y="164" width="1.0274%" height="15" fill="rgb(247,18,42)" fg:x="59" fg:w="18"/><text x="3.6176%" y="174.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:336) (364 samples, 20.78%)</title><rect x="4.3950%" y="164" width="20.7763%" height="15" fill="rgb(241,131,45)" fg:x="77" fg:w="364"/><text x="4.6450%" y="174.50">_unique1d (numpy/lib/arraysetops...</text></g><g><title>_unique1d (numpy/lib/arraysetops.py:352) (8 samples, 0.46%)</title><rect x="25.1712%" y="164" width="0.4566%" height="15" fill="rgb(249,31,29)" fg:x="441" fg:w="8"/><text x="25.4212%" y="174.50"></text></g><g><title>setdiff1d (numpy/lib/arraysetops.py:979) (400 samples, 22.83%)</title><rect x="3.1393%" y="132" width="22.8311%" height="15" fill="rgb(225,111,53)" fg:x="55" fg:w="400"/><text x="3.3893%" y="142.50">setdiff1d (numpy/lib/arraysetops.py:..</text></g><g><title>unique (numpy/lib/arraysetops.py:274) (400 samples, 22.83%)</title><rect x="3.1393%" y="148" width="22.8311%" height="15" fill="rgb(238,160,17)" fg:x="55" fg:w="400"/><text x="3.3893%" y="158.50">unique (numpy/lib/arraysetops.py:274)</text></g><g><title>_unique1d (numpy/lib/arraysetops.py:354) (6 samples, 0.34%)</title><rect x="25.6279%" y="164" width="0.3425%" height="15" fill="rgb(214,148,48)" fg:x="449" fg:w="6"/><text x="25.8779%" y="174.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:328) (7 samples, 0.40%)</title><rect x="26.0274%" y="164" width="0.3995%" height="15" fill="rgb(232,36,49)" fg:x="456" fg:w="7"/><text x="26.2774%" y="174.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:336) (391 samples, 22.32%)</title><rect x="26.4269%" y="164" width="22.3174%" height="15" fill="rgb(209,103,24)" fg:x="463" fg:w="391"/><text x="26.6769%" y="174.50">_unique1d (numpy/lib/arraysetops.py..</text></g><g><title>_unique1d (numpy/lib/arraysetops.py:352) (6 samples, 0.34%)</title><rect x="48.7443%" y="164" width="0.3425%" height="15" fill="rgb(229,88,8)" fg:x="854" fg:w="6"/><text x="48.9943%" y="174.50"></text></g><g><title>setdiff1d (numpy/lib/arraysetops.py:980) (418 samples, 23.86%)</title><rect x="25.9703%" y="132" width="23.8584%" height="15" fill="rgb(213,181,19)" fg:x="455" fg:w="418"/><text x="26.2203%" y="142.50">setdiff1d (numpy/lib/arraysetops.py:98..</text></g><g><title>unique (numpy/lib/arraysetops.py:274) (418 samples, 23.86%)</title><rect x="25.9703%" y="148" width="23.8584%" height="15" fill="rgb(254,191,54)" fg:x="455" fg:w="418"/><text x="26.2203%" y="158.50">unique (numpy/lib/arraysetops.py:274)</text></g><g><title>_unique1d (numpy/lib/arraysetops.py:354) (13 samples, 0.74%)</title><rect x="49.0868%" y="164" width="0.7420%" height="15" fill="rgb(241,83,37)" fg:x="860" fg:w="13"/><text x="49.3368%" y="174.50"></text></g><g><title>in1d (numpy/lib/arraysetops.py:646) (2 samples, 0.11%)</title><rect x="49.9429%" y="148" width="0.1142%" height="15" fill="rgb(233,36,39)" fg:x="875" fg:w="2"/><text x="50.1929%" y="158.50"></text></g><g><title>min (numpy/core/fromnumeric.py:2953) (2 samples, 0.11%)</title><rect x="49.9429%" y="164" width="0.1142%" height="15" fill="rgb(226,3,54)" fg:x="875" fg:w="2"/><text x="50.1929%" y="174.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:88) (2 samples, 0.11%)</title><rect x="49.9429%" y="180" width="0.1142%" height="15" fill="rgb(245,192,40)" fg:x="875" fg:w="2"/><text x="50.1929%" y="190.50"></text></g><g><title>in1d (numpy/lib/arraysetops.py:658) (5 samples, 0.29%)</title><rect x="50.0571%" y="148" width="0.2854%" height="15" fill="rgb(238,167,29)" fg:x="877" fg:w="5"/><text x="50.3071%" y="158.50"></text></g><g><title>min (numpy/core/fromnumeric.py:2953) (5 samples, 0.29%)</title><rect x="50.0571%" y="164" width="0.2854%" height="15" fill="rgb(232,182,51)" fg:x="877" fg:w="5"/><text x="50.3071%" y="174.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:88) (5 samples, 0.29%)</title><rect x="50.0571%" y="180" width="0.2854%" height="15" fill="rgb(231,60,39)" fg:x="877" fg:w="5"/><text x="50.3071%" y="190.50"></text></g><g><title>in1d (numpy/lib/arraysetops.py:745) (11 samples, 0.63%)</title><rect x="50.3425%" y="148" width="0.6279%" height="15" fill="rgb(208,69,12)" fg:x="882" fg:w="11"/><text x="50.5925%" y="158.50"></text></g><g><title>in1d (numpy/lib/arraysetops.py:746) (7 samples, 0.40%)</title><rect x="50.9703%" y="148" width="0.3995%" height="15" fill="rgb(235,93,37)" fg:x="893" fg:w="7"/><text x="51.2203%" y="158.50"></text></g><g><title>&lt;module&gt; (v4d.py:97) (903 samples, 51.54%)</title><rect x="0.0000%" y="68" width="51.5411%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="903"/><text x="0.2500%" y="78.50">&lt;module&gt; (v4d.py:97)</text></g><g><title>generate_random_frames (v4d.py:84) (848 samples, 48.40%)</title><rect x="3.1393%" y="84" width="48.4018%" height="15" fill="rgb(222,207,29)" fg:x="55" fg:w="848"/><text x="3.3893%" y="94.50">generate_random_frames (v4d.py:84)</text></g><g><title>add_frame (v4d.py:65) (848 samples, 48.40%)</title><rect x="3.1393%" y="100" width="48.4018%" height="15" fill="rgb(206,96,30)" fg:x="55" fg:w="848"/><text x="3.3893%" y="110.50">add_frame (v4d.py:65)</text></g><g><title>compare_frames (v4d.py:72) (848 samples, 48.40%)</title><rect x="3.1393%" y="116" width="48.4018%" height="15" fill="rgb(218,138,4)" fg:x="55" fg:w="848"/><text x="3.3893%" y="126.50">compare_frames (v4d.py:72)</text></g><g><title>setdiff1d (numpy/lib/arraysetops.py:981) (30 samples, 1.71%)</title><rect x="49.8288%" y="132" width="1.7123%" height="15" fill="rgb(250,191,14)" fg:x="873" fg:w="30"/><text x="50.0788%" y="142.50"></text></g><g><title>in1d (numpy/lib/arraysetops.py:753) (2 samples, 0.11%)</title><rect x="51.4269%" y="148" width="0.1142%" height="15" fill="rgb(239,60,40)" fg:x="901" fg:w="2"/><text x="51.6769%" y="158.50"></text></g><g><title>&lt;module&gt; (v4d.py:98) (457 samples, 26.08%)</title><rect x="51.5411%" y="68" width="26.0845%" height="15" fill="rgb(206,27,48)" fg:x="903" fg:w="457"/><text x="51.7911%" y="78.50">&lt;module&gt; (v4d.py:98)</text></g><g><title>save (v4d.py:91) (456 samples, 26.03%)</title><rect x="51.5982%" y="84" width="26.0274%" height="15" fill="rgb(225,35,8)" fg:x="904" fg:w="456"/><text x="51.8482%" y="94.50">save (v4d.py:91)</text></g><g><title>write (gzip.py:289) (456 samples, 26.03%)</title><rect x="51.5982%" y="100" width="26.0274%" height="15" fill="rgb(250,213,24)" fg:x="904" fg:w="456"/><text x="51.8482%" y="110.50">write (gzip.py:289)</text></g><g><title>wait_result_broken_or_wakeup (concurrent/futures/process.py:412) (2 samples, 0.11%)</title><rect x="77.6256%" y="116" width="0.1142%" height="15" fill="rgb(247,123,22)" fg:x="1360" fg:w="2"/><text x="77.8756%" y="126.50"></text></g><g><title>wait (multiprocessing/connection.py:924) (2 samples, 0.11%)</title><rect x="77.6256%" y="132" width="0.1142%" height="15" fill="rgb(231,138,38)" fg:x="1360" fg:w="2"/><text x="77.8756%" y="142.50"></text></g><g><title>register (selectors.py:352) (2 samples, 0.11%)</title><rect x="77.6256%" y="148" width="0.1142%" height="15" fill="rgb(231,145,46)" fg:x="1360" fg:w="2"/><text x="77.8756%" y="158.50"></text></g><g><title>_recv_bytes (multiprocessing/connection.py:413) (2 samples, 0.11%)</title><rect x="77.7397%" y="148" width="0.1142%" height="15" fill="rgb(251,118,11)" fg:x="1362" fg:w="2"/><text x="77.9897%" y="158.50"></text></g><g><title>_recv (multiprocessing/connection.py:374) (2 samples, 0.11%)</title><rect x="77.7397%" y="164" width="0.1142%" height="15" fill="rgb(217,147,25)" fg:x="1362" fg:w="2"/><text x="77.9897%" y="174.50"></text></g><g><title>_recv (multiprocessing/connection.py:378) (291 samples, 16.61%)</title><rect x="77.8539%" y="164" width="16.6096%" height="15" fill="rgb(247,81,37)" fg:x="1364" fg:w="291"/><text x="78.1039%" y="174.50">_recv (multiprocessing/con..</text></g><g><title>recv (multiprocessing/connection.py:249) (337 samples, 19.24%)</title><rect x="77.7397%" y="132" width="19.2352%" height="15" fill="rgb(209,12,38)" fg:x="1362" fg:w="337"/><text x="77.9897%" y="142.50">recv (multiprocessing/connecti..</text></g><g><title>_recv_bytes (multiprocessing/connection.py:420) (335 samples, 19.12%)</title><rect x="77.8539%" y="148" width="19.1210%" height="15" fill="rgb(227,1,9)" fg:x="1364" fg:w="335"/><text x="78.1039%" y="158.50">_recv_bytes (multiprocessing/c..</text></g><g><title>_recv (multiprocessing/connection.py:385) (43 samples, 2.45%)</title><rect x="94.5205%" y="164" width="2.4543%" height="15" fill="rgb(248,47,43)" fg:x="1656" fg:w="43"/><text x="94.7705%" y="174.50">_r..</text></g><g><title>wait_result_broken_or_wakeup (concurrent/futures/process.py:419) (348 samples, 19.86%)</title><rect x="77.7397%" y="116" width="19.8630%" height="15" fill="rgb(221,10,30)" fg:x="1362" fg:w="348"/><text x="77.9897%" y="126.50">wait_result_broken_or_wakeup (c..</text></g><g><title>recv (multiprocessing/connection.py:250) (11 samples, 0.63%)</title><rect x="96.9749%" y="132" width="0.6279%" height="15" fill="rgb(210,229,1)" fg:x="1699" fg:w="11"/><text x="97.2249%" y="142.50"></text></g><g><title>run (concurrent/futures/process.py:339) (379 samples, 21.63%)</title><rect x="77.6256%" y="100" width="21.6324%" height="15" fill="rgb(222,148,37)" fg:x="1360" fg:w="379"/><text x="77.8756%" y="110.50">run (concurrent/futures/process.py..</text></g><g><title>wait_result_broken_or_wakeup (concurrent/futures/process.py:427) (29 samples, 1.66%)</title><rect x="97.6027%" y="116" width="1.6553%" height="15" fill="rgb(234,67,33)" fg:x="1710" fg:w="29"/><text x="97.8527%" y="126.50"></text></g><g><title>run (concurrent/futures/process.py:345) (2 samples, 0.11%)</title><rect x="99.2580%" y="100" width="0.1142%" height="15" fill="rgb(247,98,35)" fg:x="1739" fg:w="2"/><text x="99.5080%" y="110.50"></text></g><g><title>process_result_item (concurrent/futures/process.py:453) (2 samples, 0.11%)</title><rect x="99.2580%" y="116" width="0.1142%" height="15" fill="rgb(247,138,52)" fg:x="1739" fg:w="2"/><text x="99.5080%" y="126.50"></text></g><g><title>set_result (concurrent/futures/_base.py:548) (2 samples, 0.11%)</title><rect x="99.2580%" y="132" width="0.1142%" height="15" fill="rgb(213,79,30)" fg:x="1739" fg:w="2"/><text x="99.5080%" y="142.50"></text></g><g><title>run (concurrent/futures/process.py:375) (4 samples, 0.23%)</title><rect x="99.3721%" y="100" width="0.2283%" height="15" fill="rgb(246,177,23)" fg:x="1741" fg:w="4"/><text x="99.6221%" y="110.50"></text></g><g><title>join_executor_internals (concurrent/futures/process.py:557) (4 samples, 0.23%)</title><rect x="99.3721%" y="116" width="0.2283%" height="15" fill="rgb(230,62,27)" fg:x="1741" fg:w="4"/><text x="99.6221%" y="126.50"></text></g><g><title>join (multiprocessing/process.py:149) (4 samples, 0.23%)</title><rect x="99.3721%" y="132" width="0.2283%" height="15" fill="rgb(216,154,8)" fg:x="1741" fg:w="4"/><text x="99.6221%" y="142.50"></text></g><g><title>wait (multiprocessing/popen_fork.py:43) (4 samples, 0.23%)</title><rect x="99.3721%" y="148" width="0.2283%" height="15" fill="rgb(244,35,45)" fg:x="1741" fg:w="4"/><text x="99.6221%" y="158.50"></text></g><g><title>poll (multiprocessing/popen_fork.py:27) (4 samples, 0.23%)</title><rect x="99.3721%" y="164" width="0.2283%" height="15" fill="rgb(251,115,12)" fg:x="1741" fg:w="4"/><text x="99.6221%" y="174.50"></text></g><g><title>run (threading.py:975) (5 samples, 0.29%)</title><rect x="99.6005%" y="100" width="0.2854%" height="15" fill="rgb(240,54,50)" fg:x="1745" fg:w="5"/><text x="99.8505%" y="110.50"></text></g><g><title>_feed (multiprocessing/queues.py:228) (5 samples, 0.29%)</title><rect x="99.6005%" y="116" width="0.2854%" height="15" fill="rgb(233,84,52)" fg:x="1745" fg:w="5"/><text x="99.8505%" y="126.50"></text></g><g><title>all (1,752 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(207,117,47)" fg:x="0" fg:w="1752"/><text x="0.2500%" y="62.50"></text></g><g><title>_bootstrap (threading.py:995) (392 samples, 22.37%)</title><rect x="77.6256%" y="68" width="22.3744%" height="15" fill="rgb(249,43,39)" fg:x="1360" fg:w="392"/><text x="77.8756%" y="78.50">_bootstrap (threading.py:995)</text></g><g><title>_bootstrap_inner (threading.py:1038) (392 samples, 22.37%)</title><rect x="77.6256%" y="84" width="22.3744%" height="15" fill="rgb(209,38,44)" fg:x="1360" fg:w="392"/><text x="77.8756%" y="94.50">_bootstrap_inner (threading.py:1038)</text></g></svg></svg>